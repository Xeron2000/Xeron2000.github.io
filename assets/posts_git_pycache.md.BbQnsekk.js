import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.C4qplGO_.js";const k=JSON.parse('{"title":"如何处理误提交的 __pycache__","description":"如何从 Git 仓库中移除误提交的 `__pycache__` 文件夹，并清理历史记录。","frontmatter":{"date":"2025-01-18T00:00:00.000Z","title":"如何处理误提交的 `__pycache__`","category":"Code","tags":["python","code","git","bfg-repo-cleaner"],"description":"如何从 Git 仓库中移除误提交的 `__pycache__` 文件夹，并清理历史记录。"},"headers":[],"relativePath":"posts/git_pycache.md","filePath":"posts/git_pycache.md"}'),h={name:"posts/git_pycache.md"};function p(n,a,l,c,r,o){return i(),e("div",null,a[0]||(a[0]=[t(`<h1 id="如何处理误提交的-pycache" tabindex="-1">如何处理误提交的__pycache__ <a class="header-anchor" href="#如何处理误提交的-pycache" aria-label="Permalink to &quot;如何处理误提交的__pycache__&quot;">​</a></h1><p><code>__pycache__</code> 文件夹包含 Python 的编译缓存文件（<code>.pyc</code> 等），通常不需要提交到 Git 仓库</p><h2 id="_1-确保-gitignore-文件中忽略-pycache" tabindex="-1">1. 确保 <code>.gitignore</code> 文件中忽略__pycache__ <a class="header-anchor" href="#_1-确保-gitignore-文件中忽略-pycache" aria-label="Permalink to &quot;1. 确保 \`.gitignore\` 文件中忽略__pycache__&quot;">​</a></h2><p>在项目根目录的 <code>.gitignore</code> 文件中添加以下内容，确保 Git 忽略 <code>__pycache__</code>：</p><div class="language-gitignore vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gitignore</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**/__pycache__/</span></span></code></pre></div><h2 id="_2-从-git-仓库中移除-pycache" tabindex="-1">2. 从 Git 仓库中移除__pycache__ <a class="header-anchor" href="#_2-从-git-仓库中移除-pycache" aria-label="Permalink to &quot;2. 从 Git 仓库中移除__pycache__&quot;">​</a></h2><p>从 Git 索引中移除已经提交的 <code>__pycache__</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __pycache__</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Remove __pycache__ from version control&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><h2 id="_3-使用-bfg-repo-cleaner-清除历史记录" tabindex="-1">3. 使用 BFG Repo-Cleaner 清除历史记录 <a class="header-anchor" href="#_3-使用-bfg-repo-cleaner-清除历史记录" aria-label="Permalink to &quot;3. 使用 BFG Repo-Cleaner 清除历史记录&quot;">​</a></h2><p>如果 <code>__pycache__</code> 已经存在于 Git 的历史记录中，你可以使用 <a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noreferrer">BFG Repo-Cleaner</a> 来彻底清除它</p><h3 id="安装-bfg-repo-cleaner" tabindex="-1">安装 BFG Repo-Cleaner <a class="header-anchor" href="#安装-bfg-repo-cleaner" aria-label="Permalink to &quot;安装 BFG Repo-Cleaner&quot;">​</a></h3><p>arch用户可以通过 AUR 安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yay</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bfg-repo-cleaner</span></span></code></pre></div><p>或者从其 <a href="https://github.com/rtyley/bfg-repo-cleaner/releases" target="_blank" rel="noreferrer">GitHub 页面</a> 下载 jar 文件</p><h3 id="使用-bfg-清理" tabindex="-1">使用 BFG 清理 <a class="header-anchor" href="#使用-bfg-清理" aria-label="Permalink to &quot;使用 BFG 清理&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bfg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete-folders</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__pycache__&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-blob-protection</span></span></code></pre></div><p>运行完成后，会清理掉所有历史中的 <code>__pycache__</code> 文件夹</p><h3 id="清理历史并优化" tabindex="-1">清理历史并优化 <a class="header-anchor" href="#清理历史并优化" aria-label="Permalink to &quot;清理历史并优化&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expire</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --expire=now</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune=now</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --aggressive</span></span></code></pre></div><h3 id="强制推送到远程仓库" tabindex="-1">强制推送到远程仓库 <a class="header-anchor" href="#强制推送到远程仓库" aria-label="Permalink to &quot;强制推送到远程仓库&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div>`,21)]))}const g=s(h,[["render",p]]);export{k as __pageData,g as default};
